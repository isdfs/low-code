// Mixin 定义部分（已提供）
// 你的 Mixin 定义...
@import '/src/mixin/animation.less';
// 实际应用部分

// fade-in 示例
.fade-in-demo {
  .fade-in(1s); // 使用 fade-in Mixin
}

// fade-out 示例
.fade-out-demo {
  .fade-out(1s); // 使用 fade-out Mixin
}

// slide-in 示例
.slide-in-demo {
  .slide-in(1s, 150px); // 使用 slide-in Mixin
}

// zoom-in 示例
.zoom-in-demo {
  .zoom-in(1s, 1.5); // 使用 zoom-in Mixin
}

// shake 示例
.shake-demo {
  .shake(0.75s, 10px); // 使用 shake Mixin
}

// swing 示例
.swing-demo {
  .swing(1s, 20deg); // 使用 swing Mixin
}

// rotate 示例
.rotate-demo {
  .rotate(1s, 360deg); // 使用 rotate Mixin
}

// pulse 示例
.pulse-demo {
  .pulse(2s, 1.2); // 使用 pulse Mixin
}

// 其他动画示例
// bounce 示例
.bounce-demo {
  .bounce(1s, 3); // 使用 bounce Mixin
}

// flip 示例
.flip-demo {
  .flip(0.5s, horizontal); // 使用 flip Mixin
}

// wobble 示例
.wobble-demo {
  .wobble(1s, 15deg); // 使用 wobble Mixin
}

// tada 示例
.tada-demo {
  .tada(1s, 10deg); // 使用 tada Mixin
}

// fade-slide 示例
.fade-slide-demo {
  .fade-slide(0.75s, 50px); // 使用 fade-slide Mixin
}

// zoom-fade 示例
.zoom-fade-demo {
  .zoom-fade(0.75s, 1.2); // 使用 zoom-fade Mixin
}

// blur-in 示例
.blur-in-demo {
  .blur-in(0.75s, 10px); // 使用 blur-in Mixin
}

// blur-out 示例
.blur-out-demo {
  .blur-out(0.75s, 10px); // 使用 blur-out Mixin
}

// flash 示例
.flash-demo {
  .flash(1s, rgba(255, 255, 255, 0.8)); // 使用 flash Mixin
}

// roll-in 示例
.roll-in-demo {
  .roll-in(1s, 100px); // 使用 roll-in Mixin
}

// slide-up 示例
.slide-up-demo {
  .slide-up(0.75s, 100px); // 使用 slide-up Mixin
}

// slide-down 示例
.slide-down-demo {
  .slide-down(0.75s, 100px); // 使用 slide-down Mixin
}

// pulse-border 示例
.pulse-border-demo {
  .pulse-border(2s, 2px, rgba(0, 0, 0, 0.5)); // 使用 pulse-border Mixin
}

// color-change 示例
.color-change-demo {
  .color-change(1s, #ff0000, #0000ff); // 使用 color-change Mixin
}

// flip-horizontal 示例
.flip-horizontal-demo {
  .flip-horizontal(0.75s); // 使用 flip-horizontal Mixin
}

// flip-vertical 示例
.flip-vertical-demo {
  .flip-vertical(0.75s); // 使用 flip-vertical Mixin
}

// rotate-bounce 示例
.rotate-bounce-demo {
  .rotate-bounce(1s, 20px, 360deg); // 使用 rotate-bounce Mixin
}

// pulse-color 示例
.pulse-color-demo {
  .pulse-color(2s, rgba(0, 255, 0, 0.3)); // 使用 pulse-color Mixin
}

// light-speed-in 示例
.light-speed-in-demo {
  .light-speed-in(1s, left); // 使用 light-speed-in Mixin
}

// light-speed-out 示例
.light-speed-out-demo {
  .light-speed-out(1s, right); // 使用 light-speed-out Mixin
}

// expand-collapse 示例
.expand-collapse-demo {
  .expand-collapse(0.75s, 0.5, 1); // 使用 expand-collapse Mixin
}


/* 
  Mixin: gravity-drop
  功能描述:
    为元素添加重力下落效果，模拟物体从高处下落并因重力加速。
  参数:
    @duration: 动画持续时间，默认值为 1.5s。
    @height: 下落高度，默认值为 300px。
*/
.gravity-drop(@duration: 1.5s, @height: 300px) {
  animation: gravityDrop @duration cubic-bezier(0.42, 0, 0.58, 1);

  @keyframes gravityDrop {
    0% {
      transform: translateY(0);
      opacity: 1;
    }
    50% {
      transform: translateY(@height / 2);
      opacity: 0.8;
    }
    100% {
      transform: translateY(@height);
      opacity: 0;
    }
  }
}

/* 
  Mixin: particle-explosion
  功能描述:
    为元素添加粒子爆炸效果，模拟粒子从中心向四周扩散。
  参数:
    @duration: 动画持续时间，默认值为 2s。
    @particleColor: 粒子颜色，默认值为 rgba(255, 255, 255, 0.7)。
    @particleSize: 粒子大小，默认值为 4px。
    @particleCount: 粒子数量，默认值为 20。
*/
.particle-explosion(@duration: 2s, @particleColor: rgba(255, 255, 255, 0.7), @particleSize: 4px, @particleCount: 20) {
  position: relative;
  overflow: visible;

  &::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    background: transparent;
    animation: particleExplosion @duration ease-out;
  }

  @keyframes particleExplosion {
    0% {
      opacity: 1;
    }
    100% {
      opacity: 0;
    }
  }

  // 创建多个粒子
  &::before {
    @i: 0;
    .loop(@i) when (@i < @particleCount) {
      @angle: (360deg / @particleCount) * @i;
      @distance: 50px + (20px * @i / @particleCount);

      &::before {
        content: '';
        position: absolute;
        top: 50%;
        left: 50%;
        width: @particleSize;
        height: @particleSize;
        background: @particleColor;
        border-radius: 50%;
        transform: rotate(@angle) translate(@distance) rotate(-@angle);
        animation: particleExplosion @duration ease-out;
      }

      .loop(@i + 1);
    }
  }
}

/* 
  Mixin: spring-bounce
  功能描述:
    为元素添加弹簧反弹效果，模拟弹性物体的拉伸与压缩。
  参数:
    @duration: 动画持续时间，默认值为 1s。
    @amplitude: 振幅，默认值为 20px。
    @damping: 阻尼系数，默认值为 5。
*/
.spring-bounce(@duration: 1s, @amplitude: 20px, @damping: 5) {
  animation: springBounce @duration ease-in-out;

  @keyframes springBounce {
    0% {
      transform: translateY(0);
    }
    25% {
      transform: translateY(-@amplitude);
    }
    50% {
      transform: translateY(0);
    }
    75% {
      transform: translateY(-(@amplitude / @damping));
    }
    100% {
      transform: translateY(0);
    }
  }
}

/* 
  Mixin: vortex
  功能描述:
    为元素添加旋涡效果，模拟物体被吸入旋涡的旋转和缩放。
  参数:
    @duration: 动画持续时间，默认值为 2s。
    @rotate: 旋转角度，默认值为 720deg。
    @scale: 缩放比例，默认值为 0。
*/
.vortex(@duration: 2s, @rotate: 720deg, @scale: 0) {
  animation: vortex @duration ease-in-out;

  @keyframes vortex {
    0% {
      transform: scale(1) rotate(0);
      opacity: 1;
    }
    100% {
      transform: scale(@scale) rotate(@rotate);
      opacity: 0;
    }
  }
}

/* 
  Mixin: fireworks-display
  功能描述:
    为元素添加烟花展示效果，模拟烟花爆炸并散开的效果。
  参数:
    @duration: 动画持续时间，默认值为 2.5s。
    @colors: 烟花颜色数组，默认值为 #ff6347, #ffa500, #32cd32, #1e90ff, #ff69b4。
    @explosionRadius: 爆炸半径，默认值为 100px。
    @particleSize: 粒子大小，默认值为 5px。
*/
.fireworks-display(@duration: 2.5s, @colors: #ff6347, #ffa500, #32cd32, #1e90ff, #ff69b4, @explosionRadius: 100px, @particleSize: 5px) {
  position: relative;
  overflow: visible;

  // 烟花爆炸
  @i: 0;
  .loop(@i) when (@i < length(@colors)) {
    @color: extract(@colors, @i + 1);
    @angle: (360deg / length(@colors)) * @i;

    &::before {
      content: '';
      position: absolute;
      top: 50%;
      left: 50%;
      width: @particleSize;
      height: @particleSize;
      background: @color;
      border-radius: 50%;
      transform: rotate(@angle) translate(@explosionRadius) rotate(-@angle);
      animation: fireworksExplosion @duration ease-out;
    }

    .loop(@i + 1);
  }

  @keyframes fireworksExplosion {
    0% {
      transform: translate(-50%, -50%) scale(0);
      opacity: 1;
    }
    50% {
      transform: translate(-50%, -50%) scale(1.5);
      opacity: 0.7;
    }
    100% {
      transform: translate(-50%, -50%) scale(0);
      opacity: 0;
    }
  }
}

/* 
  Mixin: ripple-effect
  功能描述:
    为元素添加水波纹效果，模拟涟漪从中心扩展到四周。
  参数:
    @duration: 动画持续时间，默认值为 2s。
    @color: 波纹颜色，默认值为 rgba(0, 0, 255, 0.2)。
    @spread: 波纹扩展距离，默认值为 150px。
*/
.ripple-effect(@duration: 2s, @color: rgba(0, 0, 255, 0.2), @spread: 150px) {
  position: relative;
  overflow: hidden;

  &::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 20px;
    height: 20px;
    background: @color;
    border-radius: 50%;
    transform: translate(-50%, -50%) scale(0);
    animation: rippleEffect @duration ease-out;
    opacity: 0;
  }

  @keyframes rippleEffect {
    0% {
      transform: translate(-50%, -50%) scale(0);
      opacity: 1;
    }
    100% {
      transform: translate(-50%, -50%) scale(@spread / 10);
      opacity: 0;
    }
  }
}

/* 
  Mixin: water-drop
  功能描述:
    为元素添加水滴效果，模拟水滴落下的轨迹。
  参数:
    @duration: 动画持续时间，默认值为 1.5s。
    @color: 水滴颜色，默认值为 rgba(0, 0, 255, 0.5)。
    @height: 水滴落下的高度，默认值为 100px。
*/
.water-drop(@duration: 1.5s, @color: rgba(0, 0, 255, 0.5), @height: 100px) {
  position: relative;
  overflow: visible;

  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: 50%;
    width: 10px;
    height: 10px;
    background: @color;
    border-radius: 50%;
    transform: translate(-50%, 0) scaleY(0.5);
    animation: waterDrop @duration ease-in-out;
  }

  @keyframes waterDrop {
    0% {
      transform: translate(-50%, 0) scaleY(0.5);
      opacity: 1;
    }
    50% {
      transform: translate(-50%, @height / 2) scaleY(1);
      opacity: 0.8;
    }
    100% {
      transform: translate(-50%, @height) scaleY(0.5);
      opacity: 0;
    }
  }
}

/* 
  Mixin: oscillation
  功能描述:
    为元素添加振荡效果，模拟物体在左右摆动中逐渐减弱。
  参数:
    @duration: 动画持续时间，默认值为 3s。
    @amplitude: 振荡幅度，默认值为 50px。
    @damping: 阻尼系数，默认值为 2。
*/
.oscillation(@duration: 3s, @amplitude: 50px, @damping: 2) {
  animation: oscillation @duration ease-in-out;

  @keyframes oscillation {
    0% {
      transform: translateX(0);
    }
    20% {
      transform: translateX(@amplitude);
    }
    40% {
      transform: translateX(-@amplitude / @damping);
    }
    60% {
      transform: translateX(@amplitude / (@damping * 2));
    }
    80% {
      transform: translateX(-@amplitude / (@damping * 4));
    }
    100% {
      transform: translateX(0);
    }
  }
}

/* 
  Mixin: comet
  功能描述:
    为元素添加彗星尾巴效果，模拟彗星划过天空的运动轨迹。
  参数:
    @duration: 动画持续时间，默认值为 2s。
    @color: 彗星尾巴颜色，默认值为 rgba(255, 255, 255, 0.7)。
    @length: 彗星尾巴长度，默认值为 100px。
*/
.comet(@duration: 2s, @color: rgba(255, 255, 255, 0.7), @length: 100px) {
  position: relative;
  overflow: visible;

  &::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 0;
    width: @length;
    height: 4px;
    background: linear-gradient(to right, @color, transparent);
    transform: translateY(-50%);
    animation: comet @duration ease-in-out;
  }

  @keyframes comet {
    0% {
      transform: translateX(-@length) translateY(-50%);
      opacity: 0;
    }
    50% {
      transform: translateX(0) translateY(-50%);
      opacity: 1;
    }
    100% {
      transform: translateX(@length) translateY(-50%);
      opacity: 0;
    }
  }
}

/* 
  Mixin: thunderstorm
  功能描述:
    为元素添加雷暴效果，模拟闪电的闪烁和震动。
  参数:
    @duration: 动画持续时间，默认值为 1.5s。
    @flashColor: 闪电颜色，默认值为 rgba(255, 255, 255, 0.9)。
    @shakeIntensity: 震动强度，默认值为 10px。
*/
.thunderstorm(@duration: 1.5s, @flashColor: rgba(255, 255, 255, 0.9), @shakeIntensity: 10px) {
  position: relative;

  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: @flashColor;
    opacity: 0;
    animation: flash @duration infinite;
  }

  @keyframes flash {
    0%, 20%, 40%, 60%, 80%, 100% {
      opacity: 0;
    }
    10%, 30%, 50%, 70%, 90% {
      opacity: 1;
    }
  }

  animation: shake @duration infinite;

  @keyframes shake {
    0%, 100% {
      transform: translate(0);
    }
    10%, 30%, 50%, 70%, 90% {
      transform: translate(@shakeIntensity, -@shakeIntensity);
    }
    20%, 40%, 60%, 80% {
      transform: translate(-@shakeIntensity, @shakeIntensity);
    }
  }
}
